{"ast":null,"code":"import { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    error,\n    clearError,\n    loading,\n    request\n  };\n};","map":{"version":3,"sources":["/Users/kir/projects/mern-demo/next-client/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e","clearError"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACpFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF,UAAGM,IAAH,EAAS;AACPA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACD;;AAED,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAO;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAP,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,qBAA1B,CAAN;AACD;;AAEDhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AAED,KAhBD,CAgBE,OAAOK,CAAP,EAAU;AACVjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACD;AACF,GAxB0B,EAwBxB,EAxBwB,CAA3B;AA0BA,QAAMC,UAAU,GAAGrB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAAED,IAAAA,KAAF;AAASiB,IAAAA,UAAT;AAAqBnB,IAAAA,OAArB;AAA8BI,IAAAA;AAA9B,GAAP;AACD,CAjCM","sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if(body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url,  { method, body, headers });\n      const data = await response.json();\n\n      if(!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так');\n      }\n      \n      setLoading(false);\n      return data;\n\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return { error, clearError, loading, request };\n}\n"]},"metadata":{},"sourceType":"module"}